#!/bin/bash

# -----------------------------
# Proxmox Template Creation Script with Checksum Verification
# -----------------------------

# Colors
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# Global Variables
IMAGE_PATH="/var/lib/vz/template/images/"
LOG_FILE="/var/log/proxmox_template_creation.log"
IMAGES_FILE="images.txt"
NODES_FILE="nodes.txt"

# Ensure the image directory exists
mkdir -p "$IMAGE_PATH"

# Function to display a styled title
display_title() {
    local title="$1"
    echo -e "${BLUE}========================================${RESET}"
    echo -e "${BLUE} $title ${RESET}"
    echo -e "${BLUE}========================================${RESET}"
    echo
}

# Function to display a progress bar
progress_bar() {
    local width=50
    local color="$1"
    for ((i = 0; i <= width; i++)); do
        printf "${color}[%-*s]\r" $width "$(printf "%0.s#" $(seq 1 $i))"
        sleep 0.05
    done
    printf "\n"
}

# Function to log messages
log_message() {
    local message="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" | tee -a "$LOG_FILE"
}

# Function to load inventory from a file
load_inventory() {
    local file="$1"
    declare -n array="$2"
    while IFS='|' read -r key value; do
        array["$key"]="$value"
    done < "$file"
}

# Function to list and select from an inventory
select_from_inventory() {
    local title="$1"
    declare -n inventory="$2"
    declare -n selected_value="$3"
    declare -n selected_key="$4"

    display_title "$title"
    local i=1
    local keys=()
    for key in "${!inventory[@]}"; do
        keys+=("$key")
        echo -e "${BLUE}  $i) $key${RESET}"
        ((i++))
    done

    while true; do
        read -p "Select an option (1-${#inventory[@]}): " choice
        if [[ "$choice" =~ ^[0-9]+$ ]] && ((choice >= 1 && choice <= ${#inventory[@]})); then
            selected_key="${keys[$((choice-1))]}"
            selected_value="${inventory[$selected_key]}"
            break
        else
            echo -e "${RED}‚ùå Invalid selection. Please try again.${RESET}"
        fi
    done
}

# Function to list available Proxmox nodes
select_node() {
    declare -A NODE_IPS
    load_inventory "$NODES_FILE" NODE_IPS

    select_from_inventory "Listing available Proxmox nodes" NODE_IPS NODE_IP NODE
    log_message "‚úÖ Node '$NODE' selected (IP: $NODE_IP)."
}

# Function to list available Proxmox storage locations
select_proxmox_storage() {
    display_title "Detecting available Proxmox storage"
    STORAGE_LOCATIONS=$(ssh "$NODE_IP" pvesm status | awk 'NR>1 {print $1}')

    if [ -z "$STORAGE_LOCATIONS" ]; then
        echo -e "${RED}‚ùå No storage locations detected! Exiting...${RESET}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Available Proxmox Storage Locations:${RESET}"
    PS3="Select Proxmox Storage: "
    select STORAGE in $STORAGE_LOCATIONS; do
        if [ -n "$STORAGE" ]; then
            echo -e "${GREEN}üéâ Selected storage: $STORAGE${RESET}"
            break
        else
            echo -e "${RED}‚ùå Invalid selection. Please try again.${RESET}"
        fi
    done
}

# Function to list available network interfaces
select_network_interface() {
    display_title "Detecting available network interfaces"
    NETWORK_INTERFACES=$(ssh "$NODE_IP" ip -o link show | awk -F': ' '{print $2}' | grep -v lo)

    if [ -z "$NETWORK_INTERFACES" ]; then
        echo -e "${RED}‚ùå No network interfaces detected! Exiting...${RESET}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Available Network Interfaces:${RESET}"
    PS3="Select Network Interface: "
    select INTERFACE in $NETWORK_INTERFACES; do
        if [ -n "$INTERFACE" ]; then
            echo -e "${GREEN}üéâ Selected network interface: $INTERFACE${RESET}"
            break
        else
            echo -e "${RED}‚ùå Invalid selection. Please try again.${RESET}"
        fi
    done
}

# Function to prompt the user for a template ID and check if it's available
select_template_id() {
    while true; do
        echo -e "${BLUE}üîç Please enter a template ID (must be an integer between 100 and 999999999):${RESET}"
        read TEMPLATE_ID

        # Check if the provided ID is a valid integer
        if [[ ! "$TEMPLATE_ID" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}‚ùå Template ID must be a number. Please try again.${RESET}"
            continue
        fi

        # Check if the ID is within the valid range
        if ((TEMPLATE_ID < 100 || TEMPLATE_ID > 999999999)); then
            echo -e "${RED}‚ùå Template ID must be between 100 and 999999999. Please try again.${RESET}"
            continue
        fi

        # Check if the ID is already in use by any VM or template
        if ssh "$NODE_IP" qm list | awk '{print $1}' | grep -q "^$TEMPLATE_ID$"; then
            echo -e "${RED}‚ùå Template ID $TEMPLATE_ID is already in use. Please choose another ID.${RESET}"
        else
            echo -e "${GREEN}‚úÖ Assigned template ID: $TEMPLATE_ID${RESET}"
            break
        fi
    done
}

# Function to select an image from the inventory
select_image() {
    declare -A IMAGES
    load_inventory "$IMAGES_FILE" IMAGES

    select_from_inventory "Listing available images" IMAGES IMAGE_DATA IMAGE_NAME
    IMAGE_URL=$(echo "$IMAGE_DATA" | cut -d'|' -f1)
    CHECKSUM_URL=$(echo "$IMAGE_DATA" | cut -d'|' -f2)
    log_message "‚úÖ Image '$IMAGE_NAME' selected (URL: $IMAGE_URL)."
}

# Function to download the cloud image if not already present and verify checksum
download_image() {
    display_title "Downloading and verifying image"
    IMAGE_FILE="${IMAGE_PATH}${IMAGE_NAME}.qcow2"
    if [ ! -f "$IMAGE_FILE" ]; then
        echo -e "${BLUE}‚¨áÔ∏è Downloading image: $IMAGE_NAME...${RESET}"
        if ! wget -O "$IMAGE_FILE" "$IMAGE_URL"; then
            echo -e "${RED}‚ùå Failed to download image. Exiting...${RESET}"
            exit 1
        fi
        echo -e "${GREEN}‚úÖ Download completed: $IMAGE_FILE${RESET}"

        echo -e "${BLUE}üîç Downloading checksum file...${RESET}"
        CHECKSUM_FILE="/tmp/${IMAGE_NAME}_checksum"
        if ! wget -O "$CHECKSUM_FILE" "$CHECKSUM_URL"; then
            echo -e "${RED}‚ùå Failed to download checksum file. Exiting...${RESET}"
            rm -f "$IMAGE_FILE"
            exit 1
        fi

        echo -e "${BLUE}üîí Verifying checksum...${RESET}"
        if grep -q "$(sha256sum "$IMAGE_FILE" | awk '{print $1}')" "$CHECKSUM_FILE"; then
            echo -e "${GREEN}‚úÖ Checksum verification passed!${RESET}"
        else
            echo -e "${RED}‚ùå Checksum verification failed! Exiting...${RESET}"
            rm -f "$IMAGE_FILE"
            exit 1
        fi
    else
        echo -e "${GREEN}‚úÖ Image already exists: $IMAGE_FILE${RESET}"
    fi
}

# Function to create the Proxmox template
create_template() {
    display_title "Creating Proxmox template"
    echo -e "${BLUE}üîß Creating Proxmox template on node '$NODE' (IP: $NODE_IP)...${RESET}"

    # Use SSH to create the VM on the target node
    if ! ssh "$NODE_IP" qm create "$TEMPLATE_ID" \
        --name "$IMAGE_NAME-template" \
        --memory 2048 \
        --cores 2 \
        --net0 "virtio,bridge=$INTERFACE" \
        --scsi0 "$STORAGE:0,import-from=$IMAGE_FILE" \
        --scsihw virtio-scsi-pci \
        --ide2 "$STORAGE:cloudinit" \
        --boot order=scsi0 \
        --serial0 socket \
        --vga serial0; then
        echo -e "${RED}‚ùå Failed to create VM. Exiting...${RESET}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ VM $TEMPLATE_ID created successfully on node '$NODE' (IP: $NODE_IP)!${RESET}"

    echo -e "${BLUE}üîÑ Converting VM $TEMPLATE_ID into a template...${RESET}"
    progress_bar "$BLUE"
    if ! ssh "$NODE_IP" qm template "$TEMPLATE_ID"; then
        echo -e "${RED}‚ùå Failed to convert VM into a template. Exiting...${RESET}"
        exit 1
    fi
    echo -e "${GREEN}üéâ Template $TEMPLATE_ID successfully created on node '$NODE' (IP: $NODE_IP)!${RESET}"
}

# Main script
main() {
    clear
    display_title "üöÄ Proxmox Template Creation Script with Checksum Verification"

    # Step 1: Select Proxmox node
    select_node

    # Step 2: Select Proxmox storage
    select_proxmox_storage

    # Step 3: Select network interface
    select_network_interface

    # Step 4: Dynamically assign a template ID
    select_template_id

    # Step 5: Select an image for the template
    select_image

    # Step 6: Download the selected image and verify checksum
    download_image

    # Step 7: Create the Proxmox template
    create_template

    echo -e "${GREEN}üéâ Script completed successfully! Template ID: $TEMPLATE_ID${RESET}"
}

# Run the main function
main
